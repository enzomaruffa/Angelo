//
//  LSystemOutput.swift
//  
//
//  Created by Enzo Maruffa Moreira on 24/12/20.
//

import Foundation

/// A result generated by an `LSystem`
public class LSystemResult {
    
    /// The input element that was used in this results
    public let inputElement: LSystemElement
    
    /// The iterations this results has performed so far
    internal var iterationsPerformed = 0
    
    /// The current elements this result contains
    public var outputElements: [LSystemElement] = []
    
    /// The separator used between each parameter
    public var parameterSeparator = ";"
    /// The separator used between a parameter key and its value
    public var parameterKeyValueSeparator = ":"
    /// The delimiter used to define the beginning of a list of parameters
    public var parameterStartDelimiter = "("
    /// The delimiter used to define the end of a list of parameters
    public var parameterEndDelimiter = ")"
    
    /// The results in a string format, with its parameters
    public var stringWithParameters: String {
        outputElements
            .map { $0.stringWithParameters(
                    startDelimiter: parameterStartDelimiter,
                    keyValueSeparator: parameterKeyValueSeparator,
                    separator: parameterSeparator,
                    endDelimiter: parameterEndDelimiter)
                }
            .joined(separator: "")
    }
    
    /// Creates an `LSystemResult` based on an initial element
    /// - Parameter initialElement: The initial element to use
    init(initialElement: LSystemElement) {
        self.inputElement = initialElement
    }
}

extension LSystemResult: LSystemRuleContextAwareSource {
    
    /// The amount of iterations performed to create this `LSystemResult`
    public var iterations: Int {
        iterationsPerformed
    }
    
    /// The` LSystemResult` in a string format
    public var string: String {
        outputElements.map { $0.string }.joined(separator: "")
    }
}
